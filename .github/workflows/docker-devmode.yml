name: Karavan CI/CD Pipeline

on:
  push:
    branches:
      - deploy  # Trigger only on the 'deploy' branch
  pull_request:
    branches:
      - deploy  # Trigger on PRs targeting 'deploy' branch

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn test

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Run Karavan in Docker for Integration Tests
        run: |
          docker-compose up -d
          sleep 10
          curl -f http://localhost:8080 || exit 1

      - name: Stop Containers
        run: docker-compose down

  build-and-push:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/karavan:latest .
          docker push ghcr.io/${{ github.repository }}/karavan:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to Staging EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_EC2_IP }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            docker pull ghcr.io/${{ github.repository }}/karavan:latest
            docker-compose down
            docker-compose up -d

  create-ami:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/deploy'
    steps:
      - name: Create AMI from Staging EC2
        run: |
          aws ec2 create-image --instance-id ${{ secrets.STAGING_INSTANCE_ID }} --name "karavan-$(date +%Y%m%d-%H%M%S)" --no-reboot
